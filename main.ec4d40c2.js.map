{"version":3,"sources":["scripts/main.js"],"names":["score","isPlaying","row1","row2","row3","row4","column1","column2","column3","column4","rightDirection","flat","leftDirection","upDirection","downDirection","cells","document","querySelectorAll","startButton","querySelector","restartButton","createElement","messageLoseElement","messageWinElement","messageStartElement","classList","add","textContent","hidden","append","checkIfHaveMoves","filter","cell","length","haveMoves","forEach","i","includes","adjacentCell","updateScore","value","findCellForNumber","found","cellIndex","Math","floor","random","generateNumberForTile","num","appendNewNumberTile","number","updateCell","className","moveHelper","currentCell","nextCell","cellValue","addHelper","Number","remove","moveAddTiles","tilesIndexes","direction","type","step","index","moveDirectionAndSum","directionArr","innit","startButtonCallback","restartButtonCallback","documentCallbak","e","preventDefault","currentCellsValues","map","key","newCellsValues","addEventListener"],"mappings":"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","file":"main.ec4d40c2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet score = 0;\nlet isPlaying = false;\n\nconst row1 = [0, 1, 2, 3];\nconst row2 = [4, 5, 6, 7];\nconst row3 = [8, 9, 10, 11];\nconst row4 = [12, 13, 14, 15];\n\nconst column1 = [0, 4, 8, 12];\nconst column2 = [1, 5, 9, 13];\nconst column3 = [2, 6, 10, 14];\nconst column4 = [3, 7, 11, 15];\n\nconst rightDirection = [column3, column2, column1].flat();\nconst leftDirection = [column2, column3, column4].flat();\nconst upDirection = [row2, row3, row4].flat();\nconst downDirection = [row3, row2, row1].flat();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.start');\nconst restartButton = document.createElement('button');\nconst messageLoseElement = document.querySelector('.message-lose');\nconst messageWinElement = document.querySelector('.message-win');\nconst messageStartElement = document.querySelector('.message-start');\n\nrestartButton.classList.add('button', 'restart');\nrestartButton.textContent = 'Restart';\nrestartButton.hidden = true;\ndocument.querySelector('.controls').append(restartButton);\n\nconst checkIfHaveMoves = () => {\n  if ([...cells].filter(cell => cell.classList.length === 1).length > 0) {\n    return true;\n  }\n\n  let haveMoves = false;\n\n  cells.forEach((cell, i) => {\n    const topCell = row1.includes(i) ? null : cells[i - 4];\n    const bottomCell = row4.includes(i) ? null : cells[i + 4];\n    const leftCell = column1.includes(i) ? null : cells[i - 1];\n    const rightCell = column4.includes(i) ? null : cells[i + 1];\n\n    const adjacentCells = [topCell, bottomCell, leftCell, rightCell];\n\n    adjacentCells.forEach(adjacentCell => {\n      if (!adjacentCell) {\n        return;\n      }\n\n      if (adjacentCell.textContent === cell.textContent) {\n        haveMoves = true;\n      }\n    });\n  });\n\n  return haveMoves;\n};\n\nconst updateScore = (value) => {\n  if (value) {\n    score += value;\n  } else {\n    score = 0;\n  }\n  document.querySelector('.game-score').textContent = score;\n};\n\nconst findCellForNumber = function() {\n  let found = false;\n  let cellIndex;\n\n  while (!found) {\n    cellIndex = Math.floor(Math.random() * 16);\n\n    if (cells[cellIndex].classList.length === 1) {\n      found = true;\n    }\n  }\n\n  return cells[cellIndex];\n};\n\nconst generateNumberForTile = () => {\n  const num = Math.random();\n\n  return num < 0.9 ? 2 : 4;\n};\n\nconst appendNewNumberTile = () => {\n  const number = generateNumberForTile();\n  const cell = findCellForNumber();\n\n  cell.classList.add(`field-cell--${number}`);\n  cell.textContent = number;\n};\n\nconst updateCell = (cell, value = '') => {\n  cell.className = value ? `field-cell field-cell--${value}` : 'field-cell';\n  cell.textContent = value;\n};\n\nconst moveHelper = (currentCell, nextCell, cellValue) => {\n  if (nextCell.classList.length > 1) {\n    return;\n  };\n\n  updateCell(currentCell);\n  updateCell(nextCell, cellValue);\n};\n\nconst addHelper = (currentCell, nextCell, cellValue) => {\n  if (Number(nextCell.textContent) === Number(cellValue)) {\n    updateCell(currentCell);\n    updateCell(nextCell, cellValue * 2);\n    updateScore(cellValue * 2);\n\n    if (Number(cellValue * 2) === 2048) {\n      isPlaying = false;\n      messageWinElement.classList.remove('hidden');\n    }\n  };\n};\n\nconst moveAddTiles = (tilesIndexes, direction, type = 'move') => {\n  let step;\n\n  switch (direction) {\n    case 'right':\n      step = 1;\n      break;\n    case 'left':\n      step = -1;\n      break;\n    case 'up':\n      step = -4;\n      break;\n    case 'down':\n      step = 4;\n      break;\n  };\n\n  tilesIndexes.forEach(index => {\n    const currentCell = cells[index];\n\n    if (currentCell.classList.length === 1) {\n      return;\n    };\n\n    const nextCell = cells[index + step];\n    const cellValue = currentCell.textContent;\n\n    if (type === 'move') {\n      moveHelper(currentCell, nextCell, cellValue);\n\n      return;\n    };\n    addHelper(currentCell, nextCell, cellValue);\n  });\n};\n\nconst moveDirectionAndSum = (directionArr, direction) => {\n  moveAddTiles(directionArr, direction);\n  moveAddTiles(directionArr, direction);\n  moveAddTiles(directionArr, direction);\n  moveAddTiles(directionArr, direction, 'add');\n  moveAddTiles(directionArr, direction);\n  moveAddTiles(directionArr, direction);\n};\n\nconst innit = () => {\n  appendNewNumberTile();\n  appendNewNumberTile();\n  isPlaying = true;\n};\n\nconst startButtonCallback = () => {\n  innit();\n  startButton.remove();\n  restartButton.hidden = false;\n  messageStartElement.classList.add('hidden');\n};\n\nconst restartButtonCallback = () => {\n  updateScore(0);\n  messageLoseElement.classList.add('hidden');\n  messageWinElement.classList.add('hidden');\n\n  for (const cell of cells) {\n    cell.className = 'field-cell';\n    cell.textContent = '';\n  };\n  innit();\n};\n\nconst documentCallbak = (e) => {\n  e.preventDefault();\n\n  if (!checkIfHaveMoves()) {\n    isPlaying = false;\n    messageLoseElement.classList.remove('hidden');\n  };\n\n  const currentCellsValues = [...cells].map(cell => cell.textContent);\n\n  if (!isPlaying) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowDown':\n      moveDirectionAndSum(downDirection, 'down');\n      break;\n    case 'ArrowUp':\n      moveDirectionAndSum(upDirection, 'up');\n      break;\n    case 'ArrowLeft':\n      moveDirectionAndSum(leftDirection, 'left');\n      break;\n    case 'ArrowRight':\n      moveDirectionAndSum(rightDirection, 'right');\n      break;\n  };\n\n  if (!isPlaying) {\n    return;\n  }\n\n  const newCellsValues = [...cells].map(cell => cell.textContent);\n\n  const hasChanged = currentCellsValues.filter(\n    (value, i) => value !== newCellsValues[i]).length;\n\n  if (hasChanged) {\n    appendNewNumberTile();\n  }\n};\n\nstartButton.addEventListener('click', startButtonCallback);\nrestartButton.addEventListener('click', restartButtonCallback);\ndocument.addEventListener('keydown', documentCallbak);\n"]}